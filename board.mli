(** Representation of a scrabble board.

    This module represents the scrabble board data, including its shape,
    location of bonus tiles, and its current letter tile placement. *)

(** The abstract type of values representing boards. *)
type t

(** The Exception [IllegalMove] is raised when an illegal move is
    attempted *)
exception IllegalMove of string

(** [empty_board j n] initializes an empty board of size [n]x[n] with a
    dictionary stored in [j].*)
val empty_board : Yojson.Basic.t -> int -> t

(** [requires_letters board word (row,col) dir] is the required letters
    to place [word] on [board] starting at [(row,col)] in direction
    [dir] *)
val requires_letters : t -> string -> int * int -> bool -> char list

(** [place_word board word coord dir] is the new board after a legal
    [word] (the move is near current board tiles, move creates valid
    words, move is on the board) has been placed on the original [board]
    at position [coord], or raises exception [IllegalMove] if the move
    is not legal. [dir] is [true] if the word is to be placed
    horizontally, [false] if vertically.*)

val place_word : t -> string -> int * int -> bool -> t

(** [get_created_words board word coord dir] is a list of all words
    created by the given move. The move places [word] on the original
    [board] at position [coord], [dir] is the direction of the word
    (true for horizontal, false for vertical).

    Precondition: the placement is legal, so all words longer than 1
    letter generated by this move are valid words, and the move has been
    played on the board.*)

val get_created_words : t -> string -> int * int -> bool -> string list

(** [to_string] is a string represntation of the board.*)
val to_string : t -> string
